


/*
    一、java多线程：
    1.在高内聚低耦合的情况下 线程/操作/资源类
    2.判断/干活/通知
    3.防止多线程通信时，出现虚假通知的出现，需要在判断时将if换成while，因为if不会在锁已经释放，在if中等待的线程抢到锁后，
      不会重新判断条件直接向下执行

    二、java中的锁的情况，共有8种:
     一个对象中多个普通synchronized同步方法，多线程（同一对象/不同对象）调用不同的同步方法。
     一个对象中多个静态synchronized同步方法，多线程（同一对象/不同对象）调用不同的同步方法。
     一个对象中一个普通synchronized同步方法与一个普通方法，多线程（同一对象/不同对象）调用不同的同步方法。
     一个对象中一个静态synchronized同步方法与一个普通方法，多线程（同一对象/不同对象）调用不同的同步方法。

    三、λ表达式：(前提是函数式接口)
        拷贝小括号()，写死右箭头，落地大括号{}
        ()->{};
    四、写时复制(一般用于读多写少的情况)
        CopyOnWrite容器,即写时复制的容器，在一个容器添加元素的时候，不直接往当前容器object[]添加，而是先将当前容器copy一份
        新的容器然后在新的容器中添加容器添加完之后，再将原容器的引用指向新的容器
        优点：

 */
public  class ShengchanLiangXi {

}
